version: "3.0"
# openssl rand -base64 756 > .docker/mongo/replica.key
# icacls scripts\mongodb_rs_init.sh /grant Everyone:RX

services:
  # mongodb replicaset primary - 主节点
  mongod1:
    container_name: mongod1
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_LOGIN}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mongodb/data1:/data/db
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mongodb/logs1:/data/logs
      - ${DOCKER_VOLUME_DIRECTORY:-.}/.docker/mongo/replica.key:/data/replica.key
    depends_on:
      - mongod2
      - mongod3
    restart: always
    command: mongod --bind_ip_all --replSet ${MONGO_REPLICA_NAME} --keyFile /data/replica.key
    entrypoint:
      - bash
      - -c
      - |
        chmod 400 /data/replica.key
        chown 999:999 /data/replica.key
        exec docker-entrypoint.sh $$@
    networks:
      - nest-candy-net

  # mongodb replicaset secondary - 副节点
  mongod2:
    container_name: mongod2
    image: mongo:latest
    expose:
      - 27017
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mongodb/data2:/data/db
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mongodb/data2:/data/logs
      - ${DOCKER_VOLUME_DIRECTORY:-.}/.docker/mongo/replica.key:/data/replica.key
    restart: always
    command: mongod --bind_ip_all --replSet ${MONGO_REPLICA_NAME} --keyFile /data/replica.key
    entrypoint:
      - bash
      - -c
      - |
        chmod 400 /data/replica.key
        chown 999:999 /data/replica.key
        exec docker-entrypoint.sh $$@
    networks:
      - nest-candy-net

  # mongodb replicaset arbiter - 仲裁节点
  mongod3:
    container_name: mongod3
    image: mongo:latest
    expose:
      - 27017
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mongodb/data3:/data/db
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/mongodb/data3:/data/logs
      - ${DOCKER_VOLUME_DIRECTORY:-.}/.docker/mongo/replica.key:/data/replica.key
    restart: always
    command: mongod --bind_ip_all --replSet ${MONGO_REPLICA_NAME} --keyFile /data/replica.key
    entrypoint:
      - bash
      - -c
      - |
        chmod 400 /data/replica.key
        chown 999:999 /data/replica.key
        exec docker-entrypoint.sh $$@
    networks:
      - nest-candy-net

  # 初始化副本集
  mongo-setup:
    image: mongo:latest
    container_name: mongo-setup
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_LOGIN}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    depends_on:
      - mongod1
      - mongod2
      - mongod3
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/scripts/mongodb_rs_init.sh:/scripts/mongodb_rs_init.sh
      - ${DOCKER_VOLUME_DIRECTORY:-.}/scripts/wait-for-it.sh:/scripts/wait-for-it.sh
    restart: on-failure
    entrypoint: ["/bin/bash", "/scripts/wait-for-it.sh", "/scripts/mongodb_rs_init.sh"]

  # docker容器启动的redis默认是没有redis.conf的配置文件，所以用docker启动redis之前，需要先去官网下载redis.conf的配置文件
  redis:  # 服务名称
    image: redis:alpine # 使用官方镜像
    container_name: nest-easy-candy-redis # 容器名称
    restart: always # 自动重启
    volumes:
      - ./deploy/redis/db:/data # 把持久化数据挂载到宿主机
      - ./deploy/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf  # 把redis的配置文件挂载到宿主机
      - ./deploy/redis/logs:/logs # 用来存放日志
    env_file: # docker-compose --env-file .env.test up
      - .env
      - .env.test
      - .env.prod
    ports:
      - '${REDIS_PORT}:6379'  # 本机端口:容器端口 - '${REDIS_PORT}:6379'
    command: >
      --requirepass ${REDIS_PASSWORD}
    networks:
      - nest-candy-net

  nest-easy-candy-server: # nestjs服务
    build:
      context: . # 从当前路径构建镜像,根据Dockerfile构建镜像
      dockerfile: Dockerfile
    image: nest-easy-candy-server
    container_name: nest-easy-candy-server
    restart: always
    env_file:
      - .env
      - .env.test
      - .env.prod
    ports:
      - '${ADMIN_PORT}:7001'  # 本机端口:容器端口 - '${ADMIN_PORT}:7001'
      - '${WS_PORT}:7002' # 本机端口:容器端口 - '${WS_PORT}:7002'
    # 当前服务启动之前先要把depends_on指定的服务启动起来才行
    depends_on:
      - mongod1
      - redis
    networks:
      - nest-candy-net

# 声明一下网桥  my-server。
# 重要：将所有服务都挂载在同一网桥即可通过容器名来互相通信了
# 如nestjs连接mongo和redis，可以通过容器名来互相通信
networks:
  nest-candy-net:
    driver: bridge
    name: nest-candy-net